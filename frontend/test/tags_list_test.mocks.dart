// Mocks generated by Mockito 5.4.4 from annotations
// in frontend/test/tags_list_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:frontend/model/apis/tag_api.dart' as _i4;
import 'package:frontend/model/tag.dart' as _i3;
import 'package:http/http.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeClient_0 extends _i1.SmartFake implements _i2.Client {
  _FakeClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTag_1 extends _i1.SmartFake implements _i3.Tag {
  _FakeTag_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TagApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTagApiService extends _i1.Mock implements _i4.TagApiService {
  MockTagApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Client get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeClient_0(
          this,
          Invocation.getter(#client),
        ),
      ) as _i2.Client);

  @override
  _i5.Future<List<_i3.Tag>> fetchTagApi(dynamic tagId) => (super.noSuchMethod(
        Invocation.method(
          #fetchTagApi,
          [tagId],
        ),
        returnValue: _i5.Future<List<_i3.Tag>>.value(<_i3.Tag>[]),
      ) as _i5.Future<List<_i3.Tag>>);

  @override
  _i5.Future<List<_i3.Tag>> fetchTagByNameApi(
    String? name,
    dynamic accountId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchTagByNameApi,
          [
            name,
            accountId,
          ],
        ),
        returnValue: _i5.Future<List<_i3.Tag>>.value(<_i3.Tag>[]),
      ) as _i5.Future<List<_i3.Tag>>);

  @override
  _i5.Future<List<_i3.Tag>> fetchTagsApi(dynamic accountId) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchTagsApi,
          [accountId],
        ),
        returnValue: _i5.Future<List<_i3.Tag>>.value(<_i3.Tag>[]),
      ) as _i5.Future<List<_i3.Tag>>);

  @override
  _i5.Future<_i3.Tag> createTagApi(Map<String, dynamic>? tagData) =>
      (super.noSuchMethod(
        Invocation.method(
          #createTagApi,
          [tagData],
        ),
        returnValue: _i5.Future<_i3.Tag>.value(_FakeTag_1(
          this,
          Invocation.method(
            #createTagApi,
            [tagData],
          ),
        )),
      ) as _i5.Future<_i3.Tag>);

  @override
  _i5.Future<void> updateTagApi(
    Map<String, dynamic>? tagData,
    dynamic tagId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTagApi,
          [
            tagData,
            tagId,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> deleteTagApi(dynamic tagId) => (super.noSuchMethod(
        Invocation.method(
          #deleteTagApi,
          [tagId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}
